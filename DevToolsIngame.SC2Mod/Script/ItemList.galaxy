include "Script/split_string";
include "Script/ItemList/index"
include "Script/ItemList/Listbox"




struct ListBoxFilterStruct{
    string id;
    int panel;
    int editbox;
    int button;
    int list;
    ItemListSetActiveCallback setActive;
	ItemListItemTextValueFuncRef itemTextFunc;

};
typedef structref<ListBoxFilterStruct> ListBoxFilterStructRef;



struct ItemListContainerStruct{
    int panel;
    int messageBox;
    int addButton;
    int removeButton;
	int ownerPlayerPulldown;
};

typedef structref<ItemListContainerStruct> ItemListContainerStructRef;
static const string EDITBOX_PATH = "Item";
static const string ADDBTN_PATH = "AddButton";
static const string REMOVEBTN_PATH = "RemoveButton";
static const string OWNERPLAYERPULLDOWN_PATH = "OwnerPlayer";



int ItemList_FilterListAddItem(ItemListStructRef itemList, ListBoxFilterStructRef listBoxFilter, int index, playergroup pg){
    int listItem = 0;
	int player;
	int i;
	string key;	
	DialogControlAddItem(listBoxFilter.list,pg,listBoxFilter.itemTextFunc(itemList,index));
	for(i=1;i<=PlayerGroupCount(pg);i+=1){
		player = PlayerGroupPlayer(pg,i);
		if(PlayerType(player)!=c_playerTypeUser || PlayerStatus(player)!=c_playerStatusActive){continue;}
    	listItem = DialogControlGetItemCount(listBoxFilter.list,player);
		key = listBoxFilter.id+".Selected["+IntToString(player)+"]:"+IntToString(listItem);
		//console(key);
		//console(itemList.list[index]);
		DataTableSetString(true,key,ItemListGetVal(itemList,index));
    	//DataTableSetString(true,key,itemList.list[index]);
	}
    return listItem;
}

void ItemList_FilterListClear(ListBoxFilterStructRef listBoxFilter, playergroup pg){
	int player;
	int i;
	int j;
	string key;
	int itemCount;
	for(i=1;i<=PlayerGroupCount(pg);i+=1){
		player = PlayerGroupPlayer(pg,i);
		itemCount = DialogControlGetItemCount(listBoxFilter.list,player);
		for(j=1;j<=itemCount;j+=1){
			key = listBoxFilter.id+".Selected["+IntToString(player)+"]:"+IntToString(j);
			DataTableValueRemove(true,key);
		}
		DialogControlRemoveAllItems(listBoxFilter.list,pg);
    	//DataTableSetString(true,key,itemList.list[index]);
	}
    
}

void ItemList_FilterListRebuild(ItemListStructRef itemList, ListBoxFilterStructRef listBoxFilter, string filter,playergroup pg){
	//string val = DialogControlGetPropertyAsString(BoxFilter,c_triggerControlPropertyEditText,EventPlayer());
	int i; int j;
	int listItem = 0;
	data_split_t dsplit;
    split_string(dsplit, filter, ",");
	//DialogControlRemoveAllItems(listBoxFilter.list,pg);
	ItemList_FilterListClear(listBoxFilter,pg);
	for(i=0;i<ItemListGetCount(itemList);i+=1){
        if(filter==""){
            ItemList_FilterListAddItem(itemList,listBoxFilter,i,pg);
        }
		else if(dsplit.count>0){
			for(j=0;j<dsplit.count;j+=1){
				if(StringFind(ItemListGetVal(itemList,i),dsplit.data[j],false)>0){
					ItemList_FilterListAddItem(itemList,listBoxFilter,i,pg);
				}
			}
		}
		else if(StringFind(ItemListGetVal(itemList,i),filter,false)>0){
			ItemList_FilterListAddItem(itemList,listBoxFilter,i,pg);
		}
	}


}


static const string FILTERBOX_PATH = "BoxFilter";
static const string FILTERBTN_PATH = "ButtonFilter";
static const string FILTERLIST_PATH = "ListFilter";




void ItemList_FilterListHookup(ListBoxFilterStructRef listBoxFilter, string path){
	int panel = DialogControlHookupStandard(c_triggerControlTypePanel,path);;
	listBoxFilter.panel = panel;
    listBoxFilter.list = DialogControlHookup(listBoxFilter.panel,c_triggerControlTypeListBox,FILTERLIST_PATH);
    listBoxFilter.editbox = DialogControlHookup(listBoxFilter.panel,c_triggerControlTypeEditBox,FILTERBOX_PATH);
    listBoxFilter.button = DialogControlHookup(listBoxFilter.panel,c_triggerControlTypeButton,FILTERBTN_PATH);
}


void ItemList_FilterListInitStandard(ListBoxFilterStructRef Filter, string id, ItemListSetActiveCallback setActiveFunc, ItemListItemTextValueFuncRef itemTextFunc, string dlgPath) {
    trigger t;
    Filter.id = id;
    Filter.setActive = setActiveFunc;
	Filter.itemTextFunc = itemTextFunc;
    ItemList_FilterListHookup(Filter,dlgPath);
	t = TriggerCreate(id+"FilterQuery");
	TriggerAddEventDialogControl(t,c_playerAny,Filter.editbox,c_triggerControlEventTypeTextChanged);

	t = TriggerCreate(id+"SelectionChanged");
	TriggerAddEventDialogControl(t,c_playerAny,Filter.list,c_triggerControlEventTypeSelectionChanged);
}

bool ItemList_FilterBoxQuery(ItemListStructRef itemList, ListBoxFilterStructRef listBoxFilter){
	int player = EventPlayer();
	playergroup pg = PlayerGroupSingle(player);
	string val = DialogControlGetPropertyAsString(listBoxFilter.editbox,c_triggerControlPropertyEditText,player);
	ItemList_FilterListRebuild(itemList,listBoxFilter,val,pg);
	return true;
}

bool ItemList_FilterBoxSelectionChangedBase(ItemListStructRef itemList, int listBoxFilterList, string listBoxFilterId, ItemListSetActiveCallback listBoxFilterSetActive, int player){
	int listItem = DialogControlGetSelectedItem(listBoxFilterList,player);
	string val;
	int index;
	string key = listBoxFilterId+".Selected["+IntToString(player)+"]:"+IntToString(listItem);
	if(PlayerType(player)!=c_playerTypeUser || PlayerStatus(player)!=c_playerStatusActive){return false;}
    if(DataTableValueExists(true,key)){
		val=DataTableGetString(true,key);
		//console(val);
		index = ItemListFind(itemList,val);
		if(index>=0){
			ItemListSetActive(itemList,index,listBoxFilterSetActive,player);
			return true;
		}
	}
	return false;
}

bool ItemList_FilterBoxSelectionChanged(ItemListStructRef itemList, ListBoxFilterStructRef listBoxFilter, int player){
	return ItemList_FilterBoxSelectionChangedBase(
		itemList,
		listBoxFilter.list,
		listBoxFilter.id,
		listBoxFilter.setActive,
		player
	);
	//int listItem = DialogControlGetSelectedItem(listBoxFilter.list,player);
	//string val;
	//int index;
	//string key = listBoxFilter.id+".Selected["+IntToString(player)+"]:"+IntToString(listItem);
	//if(PlayerType(player)!=c_playerTypeUser || PlayerStatus(player)!=c_playerStatusActive){return false;}
    //if(DataTableValueExists(true,key)){
	//	val=DataTableGetString(true,key);
	//	console(val);
	//	index = ItemListFind(itemList,val);
	//	if(index>=0){
	//		ItemListSetActive(itemList,index,listBoxFilter.setActive,player);
	//		return true;
	//	}
	//}
	//return false;
}



ItemListStruct playerItemList;
bool playerItemListInitialized = false;

void ItemListContainer_PlayerListSetActive(ItemListStructRef itemList, int index,playergroup pg){
	//itemList.current = index;
	//console(ItemListGetVal(itemList,index));
}
text ItemListContainer_PlayerListItemTextValue(ItemListStructRef itemList,int index){
	int player = StringToInt(ItemListGetVal(itemList,index));
    text name;
    //console(ItemListGetVal(itemList,index));
    name = IntToText(player)+StringToText(":")+PlayerName(player);
    //name = StringToText(ItemListGetVal(itemList,index)+": ")+name;
	return name;
}

string ItemListContainer_PlayerListGetSelected(int list, int player){
	int listItem = DialogControlGetSelectedItem(list,player);
	string listId = IntToString(list)+".PlayerList";
	string key = listId+".Selected["+IntToString(player)+"]:"+IntToString(listItem);
	string val = "";
	if(DataTableValueExists(true,key)){
		val=DataTableGetString(true,key);
	}
	return val;
}

bool ItemListContainer_PlayerListSelectionChanged(bool a, bool b){
	int player = EventPlayer();
	int list = EventDialogControl();
	int lv_playerListItem = DialogControlGetSelectedItem(list,player);
	string listId = IntToString(list)+".PlayerList";
	string val;
	int index;
	string key = listId+".Selected["+IntToString(player)+"]:"+IntToString(lv_playerListItem);
	if(PlayerType(player)!=c_playerTypeUser || PlayerStatus(player)!=c_playerStatusActive){return false;}
    if(DataTableValueExists(true,key)){
		val=DataTableGetString(true,key);
		//console(val);
		index = ItemListFind(playerItemList,val);
		if(index>=0){
			ItemListSetActive(playerItemList,index,ItemListContainer_PlayerListSetActive,player);
			return true;
		}
	}
	return false;
}



void ItemListContainer_InitStandardPlayerList(){
    playergroup pg = PlayerGroupAll();
	if(!playerItemListInitialized){
		playerItemList.id = "Players";
		ItemListInitFromPlayerGroup(playerItemList, pg);
		playerItemListInitialized = true;
	}
}

void ItemListContainer_InitStandardPlayers(int listcontrol){
	playergroup pg = PlayerGroupAll();
	int list = listcontrol;
	int listItem = 0;
	string listId = IntToString(list)+".PlayerList";
	int player;
	int lv_i;
	int lv_j;
	string key;
	trigger t = TriggerCreate("ItemListContainer_PlayerListSelectionChanged");
	ItemListContainer_InitStandardPlayerList();
	for(lv_i=0;lv_i<ItemListGetCount(playerItemList);lv_i+=1){
		for(lv_j=1;lv_j<=PlayerGroupCount(pg);lv_j+=1){
			player = PlayerGroupPlayer(pg,lv_j);
			if(PlayerType(player)!=c_playerTypeUser || PlayerStatus(player)!=c_playerStatusActive){continue;}
			DialogControlAddItem(list,pg,ItemListContainer_PlayerListItemTextValue(playerItemList,lv_i));
			listItem = DialogControlGetItemCount(list,player);
			key = listId+".Selected["+IntToString(player)+"]:"+IntToString(listItem);
			DataTableSetString(true,key,ItemListGetVal(playerItemList,lv_i));
		}
	}
	TriggerAddEventDialogControl(t,c_playerAny,list,c_triggerControlEventTypeSelectionChanged);
}



void ItemListContainer_InitStandard(ItemListContainerStructRef ItemListContainer, string dlgPath, string triggerName){
    trigger t;
    ItemListContainer.panel = DialogControlHookupStandard(c_triggerControlTypePanel,dlgPath);
    ItemListContainer.messageBox = DialogControlHookup(ItemListContainer.panel,c_triggerControlTypeEditBox,EDITBOX_PATH);
    ItemListContainer.addButton = DialogControlHookup(ItemListContainer.panel,c_triggerControlTypeButton,ADDBTN_PATH);
    ItemListContainer.removeButton = DialogControlHookup(ItemListContainer.panel,c_triggerControlTypeButton,REMOVEBTN_PATH);
	ItemListContainer.ownerPlayerPulldown = DialogControlHookup(ItemListContainer.panel,c_triggerControlTypePulldown,OWNERPLAYERPULLDOWN_PATH);
	
	ItemListContainer_InitStandardPlayers(ItemListContainer.ownerPlayerPulldown);

    t = TriggerCreate(triggerName);
    TriggerAddEventDialogControl(t,c_playerAny,ItemListContainer.addButton,c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(t,c_playerAny,ItemListContainer.removeButton,c_triggerControlEventTypeClick);
}